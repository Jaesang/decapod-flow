apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: update-decapod-manifest
  namespace: argo
spec:
  templates:
  - name: updateManifest
    inputs:
      parameters:
      - name: action
        value: "add"
      - name: cluster_name
        value: "hanu-reference"
      - name: app_group
        value: "lma"
      - name: chart
        value: "thanos"
      - name: kv_map_str
        value: "" # {"k1": "v1", "k2": "v2"} or {"key": [v1, v2]}
    script:
      image: centos/python-38-centos7
      command: ["python"]
      env:
      source: |
        import argparse
        import git
        import ruamel.yaml
        import os
        import sys
        import json

        action = "{{inputs.parameters.action}}"
        clusterName = "{{inputs.parameters.cluster_name}}"
        appGroup = "{{inputs.parameters.app_group}}"
        chartName = "{{inputs.parameters.chart}}"
        kvMapStr = "{{inputs.parameters.kv_map_str}}"
        kvMapStr2 = kvMapStr.replace("'", "\"")
        kvMap = json.loads(kvMapStr2)

        repo = None
        config = {}
        commit_msg = ''
        numChanged = 0
        sitePath = './decapod-site'
        siteFileName = "{}/{}/site-values.yaml".format(clusterName,appGroup)
        siteFileNameFull = "{}/{}".format(sitePath, siteFileName)

        # Clone or re-use decapod-site repository #
        if not os.path.isdir(sitePath):
            print("Cloning repository...")

            repo = git.Repo.clone_from('https://github.com/robertchoi80/decapod-site', 'decapod-site')
            with repo.config_writer() as git_config:
                git_config.set_value('user', 'email', 'tks-argo@tks.com')
                git_config.set_value('user', 'name', 'TKS Argo')
        else:
            repo = git.Repo(sitePath)
            repo.remotes.origin.pull()

        with open(siteFileNameFull, 'r') as f:
            config = ruamel.yaml.round_trip_load(f, preserve_quotes=True)

        charts = config["charts"]
        chartFound = [chart for chart in charts if chart['name'] == chartName][0]

        if action == 'update':
            for k,v in kvMap.items():
              if (chartFound['override'][k] == v):
                  print("The value {} isn't changed. Skipping update...".format(v))
              else:
                  chartFound['override'][k] = v
                  numChanged += 1
            commit_msg = "update items for {} chart in '{}' cluster".format(chartName, clusterName)
        elif action == 'insert':
            for k,v in kvMap.items():
              # If the value is list type, then append one by one iterating over the list. 
              if isinstance(v, list):
                for item in v:
                  if item in chartFound['override'][k]:
                    print("The value {} already exists.".format(item))
                  else:
                    chartFound['override'][k].append(item)
                    numChanged += 1
              elif (v in chartFound['override'][k]):
                  print("The value {} already exists.".format(v))
              else:
                  chartFound['override'][k].append(v)
                  numChanged += 1
            commit_msg = "insert items for {} chart in '{}' cluster".format(chartName, clusterName)
        elif action == 'delete':
            for k,v in kvMap.items():
              if (v in chartFound['override'][k]):
                  print("Found value '{}'. Deleting it...".format(v))
                  chartFound['override'][k].remove(v)
                  numChanged += 1
              else:
                  print("The value {} doesn't exist.".format(v))
            commit_msg = "delete items for {} chart in '{}' cluster".format(chartName, clusterName)
        else:
            sys.exit("Wrong action type")

        if numChanged == 0:
          print("Nothing updated. Exiting task..")
          sys.exit(0)

        ###############################
        # Commit and push the changed #
        ###############################

        with open(siteFileNameFull, 'w') as f:
            ruamel.yaml.round_trip_dump(config, f)

        diff = repo.git.diff(repo.head.commit.tree)
        print(diff)

        # Provide a list of the files to stage
        repo.index.add([siteFileName])

        # Provide a commit message
        repo.index.commit(commit_msg)
        res = repo.remotes.origin.push()[0]

        # flag '256' means successful fast-forward
        if res.flags != 256:
            print(res.summary)
            sys.exit("Push failed!")

